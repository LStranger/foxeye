# Syntax is follows: line started with capital letter or dash contains
#   bindtable name inside double quotation marks;
# line(s) next to stated above contain function declaration;
# line started with '    Used' ends function declaration and begins function
#   description.

# This file is a part of FoxEye project.
# Copyright (C) 2010  Andrej N. Gritsenko <andrej@rep.kiev.ua>

 Core bindtables:
 ----------------

DCC   "ddcccc"            UCOMPL
  int func(struct peer_t *_f_r_o_m, char *_a_r_g_s);
    Used when user enters the command on partyline. Partyline member
    identified with session _f_r_o_m. Arguments _a_r_g_s to command are stripped
    from leading spaces and if no arguments were found then _a_r_g_s is NULL.
    Note: matching global+direct service flags instead of just global and
    service is from console settings.
      Matching: first word of partyline command without leading '.'.
      Script args: Lname Dcc-idx args

-     "ssss--**"           UCOMPL
  int func(struct peer_t *_w_h_o, INTERFACE *_w_h_e_r_e, char *_a_r_g_s);
    Used when user _w_h_o enters server-specific command on user interface.
    Other side (I_SERVICE or I_CLIENT) is specified by _w_h_e_r_e. Arguments
    _a_r_g_s to command are stripped from leading spaces. "**" in the name
    means network type (i.e. "irc", etc.). That's similar to and is
    extension of "ddcccc" bindtable.
      Matching: first word of command without leading '.'.

CHAT  "cchhaatt"           MASK
  (int) void func(struct peer_t *_f_r_o_m, char *_m_s_g);
    Used when somebody says anything (text _m_s_g) on the partyline/botnet.
    Partyline member identified with session _f_r_o_m.
      Matching: full text line.
      Script args: Lname BotChannel msg

ACT   "cchhaatt-aacctt"       MASK
  (int) void func(struct peer_t *_f_r_o_m, char *_m_s_g);
    Used when somebody does an action (text _m_s_g) on the partyline/botnet.
    Partyline member identified with session _f_r_o_m.
      Matching: full text line.  (any channel userflags are ignored)
      Script args: Lname BotChannel msg

FILT  "iinn--ffiilltteerr"      MASK
  (int) void func(struct peer_t *_f_r_o_m, char *_m_s_g, size_t _m_s_g_l_e_n);
    Used for filtering text _m_s_g on the partyline before parsing. All
    filters matched user (identified by _f_r_o_m) flags and text mask will
    be applied. Null-terminated text at area _m_s_g no longer than _m_s_g_l_e_n
    can be rewritten by internal binding.
      Matching: full text line.  (any channel userflags are ignored)
      Script args: Dcc-idx msg
      Bind result: new text line.

-     "oouutt--ffiilltteerr"     MASK
  (int) void func(struct peer_t *_t_o, char *_m_s_g, size_t _m_s_g_l_e_n);
    Used for filtering text _m_s_g before sending to partyline user. All
    filters matched user (identified by _t_o) flags and text mask will be
    applied. Null-terminated text at area _m_s_g no longer than _m_s_g_l_e_n can
    be rewritten.
      Matching: full text line.  (any channel userflags are ignored)
      Script args: Dcc-idx msg
      Bind result: new text line.

CHON  "cchhaatt--oonn"        MASK
  (int) void func(struct peer_t *_w_h_o);
    Used when somebody _w_h_o enters a DCC CHAT partyline.
      Matching: Lname.
      Script args: Lname Dcc-idx

CHOF  "cchhaatt--ooffff"       MASK
  (int) void func(struct peer_t *_w_h_o);
    Used when somebody _w_h_o "logoff" from DCC CHAT partyline.
      Matching: Lname.
      Script args: Lname Dcc-idx

CHJN  "cchhaatt--jjooiinn"      MASK
  (int) void func(INTERFACE *_i_f_a_c_e, int _b_c_h_a_n, const char *_h_o_s_t);
    Used when somebody _i_f_a_c_e (coming from _h_o_s_t) joins a botnet channel
    _b_c_h_a_n.
      Matching: bchan.  (userflags are ignored)
      Script args: botname uname bchan dccuserchar Dcc-idx host

CHPT  "cchhaatt--ppaarrtt"      MASK
  (int) void func(INTERFACE *_i_f_a_c_e, int _b_c_h_a_n);
    Used when somebody _i_f_a_c_e parts a botnet channel _b_c_h_a_n.
      Matching: bchan.  (userflags are ignored)
      Script args: botname uname Dcc-idx bchan

-     "ppaasssswwdd"         UNIQMASK
  (int) void func(const char *_p_a_s_s, char **_c_r_y_p_t_e_d);
    Used for translation plain-text _p_a_s_s password to encripted form
    pointed by _c_r_y_p_t_e_d. If previous value of _c_r_y_p_t_e_d is not NULL then
    it may be used as prototype for generated password.
      Matching: full passphrase.  (userflags are ignored)

NKCH  "nneeww--llnnaammee"      MASK
  (int) void func(char *_n_e_w_l_n, char *_o_l_d_l_n);
    Used when user Lname _o_l_d_l_n changed to Lname _n_e_w_l_n or if that _o_l_d_l_n is
    deleted from Listfile.
      Matching: old Lname.  (userflags are ignored)
      Script args: oldln newln

LOAD  "llooaadd"           MASK
  (int) void func(char *_m_o_d, char *_a_r_g_s);
    Used when module with name _m_o_d was succesfully loaded with arguments
    _a_r_g_s.
      Matching: module name with arguments.
      Script args: mod

UNLD  "uunnllooaadd"         MASK
  (int) void func(char *_m_o_d);
    Used when module with name _m_o_d was terminated.
      Matching: module name.
      Script args: mod

-     "llooggiinn"          MASK
  (int) void func(char *_w_h_o, char *_i_d_e_n_t, char *_h_o_s_t, struct peer_t *_p_e_e_r,
		  char _b_u_f[SHORT_STRING], char **_m_s_g);
    Used when connection with someone is established and we got their
    Lname _w_h_o. The binding is always called from thread but dispatcher is
    locked so very first thing the binding must do is to make call
    Unset_Iface(). Connection chain is already created, filter 'x' is
    included, and it is bound to _p_e_e_r but there is no 'iface' or 'priv'
    fields set in it. If required then binding makes password checking,
    creates an interface if there were no errors and changes _p_e_e_r state
    to something other than P_DISCONNECTED or P_INITIAL. In case of error
    it should return an error message in _m_s_g so _p_e_e_r will be destroyed on
    return. Parameters _i_d_e_n_t, and _h_o_s_t are coming from peer connection
    socket. If _b_u_f contains empty string then it's telnet session. Buffer
    _b_u_f can be used by the binding. Note: the binding must be
    thread-safe! Don't use it please, until you know how it works!!!
      Matching: network type.  (any channel userflags are ignored)

-     "ccoonnnneecctt"        MASK
  int func(const char *_l_i_n_k, char *_a_r_g_s);
    Used on "connect" command to network/server/channel/bot _l_i_n_k with
    optional parameters _a_r_g_s. Note that channel has the same type as
    it's network but binding for connect channel must have any channel
    userflag instead of some global userflags.
      Matching: link's network type.

-     "rreeggiisstteerr"       MASK
  int func(const char *_n_a_m_e, void *_v_a_r, size_t _s_i_z_e);
    Used when any module attempts to register any variable _v_a_r (_s_i_z_e is
    1 for bool, 0 for long int, 2 for read-only null-terminated string
    or >2 for regular string) with symbolic name _n_a_m_e.
      Matching: none

-     "uunnrreeggiisstteerr"     MASK
  int func(const char *_n_a_m_e);
    Used when any module attempts to unregister any variable _v_a_r with
    symbolic name _n_a_m_e.
      Matching: none

-     "ffuunnccttiioonn"       MASK
  int func(const char *_n_a_m_e, int (* _f_n) (const char *));
    Used when any module attempts to register any function _f_n with
    symbolic name _n_a_m_e.
      Matching: none

-     "uunnffuunnccttiioonn"     MASK
  int func(const char *_n_a_m_e);
    Used when any module attempts to unregister any function with
    symbolic name _n_a_m_e.
      Matching: none

-     "ssccrriipptt"         UNIQMASK
  int func(char *_n_a_m_e);
    Used when config parser attempts to load script file _n_a_m_e.
      Matching: filename.

-     "iissoonn"           UNIQ
  int func(const char *_n_e_t, const char *_p_u_b_l_i_c, const char *_l_n_a_m_e,
	   const char **_n_a_m_e);
    Used by Lname_IsOn() function for calling network-specific procedure
    for community _p_u_b_l_i_c on the network _n_e_t. If _p_u_b_l_i_c is NULL then
    check should be performed for network itself. See description of the
    Lname_IsOn() function for more details.
      Matching: network type.

-     "iinnssppeecctt--cclliieenntt" UNIQ
  (int) modeflag func(const char *_n_e_t, const char *_p_u_b_l_i_c,
		      const char *_n_a_m_e, const char **_l_n_a_m_e,
		      const char **_h_o_s_t, time_t *_i_d_l_e, short *_c_n_t);
    Used by Inspect_Client() function for calling network-specific
    procedure for community _p_u_b_l_i_c on the network _n_e_t. If _p_u_b_l_i_c is NULL
    then check should be performed for network itself. See description of
    the Inspect_Client() function for more details.
      Matching: network type.

-     "ttiimmee--sshhiifftt"     MASK
  (int) void func(int _d_e_l_t_a);
    Used when system time slipped (due to time correction or freezing).
    Binding gets value of time shift _d_e_l_t_a in seconds.
      Matching: none.

-     "ccoonnnncchhaaiinn--ggrrooww" MATCHCASE
  int func(struct peer_t *_p_e_e_r, ssize_t (**_r_e_c_v)(struct connchain_i **, idx_t,
			    char *, size_t, struct connchain_buffer **),
	   ssize_t (**_s_e_n_d)(struct connchain_i **, idx_t, const char *,
			    size_t *, struct connchain_buffer **),
	   struct connchain_buffer **_b_u_f);
    Used when Connchain_Grow() function is called. It tries to setup a
    connection chain link for some _p_e_e_r. Value of _p_e_e_r can be used for
    identification on the setup or for notification to its interface (by
    sending signal to it) in case when module which handles this filter
    is terminated. Binding also can set field 'connchain' in the _p_e_e_r to
    NULL and call Connchain_Grow() to reset it to empty chain but binding
    itself should kill connection chain which was there before and that
    kill is mandatory. Any other usage of this value is prohibited. The
    _r_e_c_v and _s_e_n_d are pointers to handlers for receiving and sending data
    through the link respectively and _b_u_f is pointer where this binding
    have to store link instance's own buffer structure, this pointer will
    be passed to the _r_e_c_v() and _s_e_n_d() handlers later. If there were no
    errors then all three those pointers must be set by the binding. Also
    there is a special case when _b_u_f is NULL, in that case binding should
    do checks needed to setup a connection chain link but do not setup it
    really. Returns 1 in case of success or 0 otherwise. Note: handler
    _r_e_c_v() should be thread-safe and handler _s_e_n_d() should be async-safe,
    be careful!
    Arguments for _r_e_c_v() are: pointer for passing to Connchain_Get();
    socket identifier; pointer to receiving buffer; size of that buffer;
    pointer to this instance's own buffer. If _r_e_c_v() got NULL pointer to
    receiving buffer then it have to destroy own buffer. If it get an
    error from next link it should do the same and in both cases return
    error and after that neither _r_e_c_v() nor _s_e_n_d() ever will be called
    again. Else should return number of received bytes.
    Arguments for _s_e_n_d() are: pointer for passing to Connchain_Put();
    socket identifier; pointer to sending buffer; pointer to counter of
    bytes to send; pointer to instance's own buffer. If _s_e_n_d() got NULL
    pointer to sending buffer then it have to try to send what is still
    left in own buffer and return 0. If own buffer is empty then _s_e_n_d()
    should return error code from next link in chain. If _s_e_n_d() got
    pointer to sending buffer not equal to NULL but count of bytes to
    send equal to 0 then it should return value CONNCHAIN_READY if it can
    take data for sending on next call (that includes checking next link
    in chain for ability to work) or some other value otherwise. If there
    were no errors then _s_e_n_d() should return number of bytes were sent
    and change counter (by argument's pointer) appropriately. The _s_e_n_d()
    function should never close or destroy the socket.
      Matching: connchain flag char.

-     "ggoott--lliisstteenneerr"    UNIQMASK
  int func(struct sockaddr *_s_a, int _s_e_t);
    Used when Listen_Port() succesfully opened listener on some port.
    The binding is called with _s_e_t equal to 1 from listening thread
    which has cancelling state enabled at that moment. The binding is
    called before of call of the backcall function (see description of
    Listen_Port() for details) with the same sctructure _s_a and binding
    have full access to it. This binding call is implemented for purpose
    if we are behind NAT and binding can make some calls to NAT firewall
    to make a DNAT port forwarding (UPnP can do it for example). Binding
    also called from main thread with _s_e_t equal to 0 after listener was
    terminated but only port is set in _s_a this time.
      Matching: anything.
