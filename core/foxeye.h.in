/*
 * Copyright (C) 1999-2017  Andrej N. Gritsenko <andrej@rep.kiev.ua>
 *
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * This file is part of FoxEye's source: common includes and definitions.
 */

#ifdef _FOXEYE_H
# error File foxeye.h can be included only once!
#endif
#define _FOXEYE_H 1

#ifdef HAVE_CONFIG_H
# include "../config.h"
#endif

/* strict POSIX.2 */
/* #define _POSIX2_SOURCE 1 */
#define _POSIX_C_SOURCE 200112L
#define _XOPEN_SOURCE 700
/* struct ucred is not available without _GNU_SOURCE so leave it set on Linux */
#ifndef _LINUX
#undef _GNU_SOURCE
#endif

#ifdef __sun
# pragma error_messages (off, E_ARG_INCOMPATIBLE_WITH_ARG_L)
#endif

#ifdef HAVE_STDINT_H
# include <stdint.h>
#endif

/* this is need for recursive thread under Linux */
#define __USE_UNIX98 1

#if TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# if HAVE_SYS_TIME_H
#  include <sys/time.h>
# else
#  include <time.h>
# endif
#endif

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdarg.h>
#include <pthread.h>
#include <signal.h>

#ifdef HAVE_THREAD_H
# include <thread.h>
#endif

#if defined STDC_HEADERS || defined _LIBC
# include <stdlib.h>
#else
# ifdef HAVE_MALLOC_H
#  include <malloc.h>
# else
void free ();
# endif
#endif

#if defined HAVE_STRING_H || defined _LIBC
# include <string.h>
#else
# ifndef memcpy
#  define memcpy(Dst, Src, Num) bcopy (Src, Dst, Num)
# endif
#endif

#if defined HAVE_STRINGS_H
# include <strings.h>
#endif

#if defined HAVE_UNISTD_H || defined _LIBC
# include <unistd.h>
#endif

#if HAVE_SYS_WAIT_H
# include <sys/wait.h>
#endif

#ifndef WEXITSTATUS
# define WEXITSTATUS(stat_val) ((unsigned)(stat_val) >> 8)
#endif
#ifndef WIFEXITED
# define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
#endif

#ifdef HAVE_LIMITS_H
# include <limits.h>
#endif

#if !defined(_POSIX_PATH_MAX) && defined(HAVE_POSIX1_LIM_H)
# include <posix1_lim.h>
#endif

#ifndef _POSIX_PATH_MAX
# define _POSIX_PATH_MAX 255
#endif

/* Don't include sys/param.h if it already has been.  */
#if defined HAVE_SYS_PARAM_H && !defined PATH_MAX && !defined MAXPATHLEN
# include <sys/param.h>
#endif

#ifdef HAVE_WCTYPE_H
# include <wctype.h>
#endif

#if !defined PATH_MAX && defined MAXPATHLEN
# define PATH_MAX MAXPATHLEN
#endif

#ifndef PATH_MAX
# define PATH_MAX _POSIX_PATH_MAX
#endif

/* set maximal filename length */
#ifdef HAVE_LONG_FILE_NAMES
# define FILENAME_LENGTH 255
#else
# define FILENAME_LENGTH 14
#endif

#ifndef TIME_T_MAX
# if defined(SIZEOF_TIME_T) && SIZEOF_TIME_T == 4
#  define TIME_T_MAX (INT_MAX)
# else
#  define TIME_T_MAX (LONG_MAX)
# endif
#endif

/* nifty trick I stole from ELM 2.5alpha. */
#ifdef DISPATCHER_C
# define WHERE 
# define INITVAL(x) = x
#else
# define WHERE extern
# define INITVAL(x) 
#endif

/* If we're not using GNU C, elide __attribute__ */
#ifndef __GNUC__
# define __attribute__(x) 
#endif

#define TRUE 1
#define FALSE 0

#define HUGE_STRING	5120
#define LONG_STRING	1024
#define STRING		256
#define SHORT_STRING	128

#ifdef ENABLE_NLS
# include <libintl.h>
# define _(a) (gettext (a))
# ifdef gettext_noop
#  define N_(a) gettext_noop (a)
# else
#  define N_(a) (a)
# endif
#else
# define _(a) (a)
# define N_(a) a
#endif

/*
 * IRC restrictions. Can be changed but not advisable to.
 */

#define LNAMELEN	32	/* Lname max width */
#define NAMEMAX		MB_LEN_MAX*LNAMELEN /* single name max width */
#define PASSWDMAX	NAMEMAX	/* still reserved 3 bytes for connchain flags */
#define IFNAMEMAX	2*NAMEMAX+1 /* interface name length */
#define IDENTLEN	10	/* user login name max width */
#define HOSTLEN		63	/* by RFC1123 */
#define HOSTMASKLEN	NAMEMAX+IDENTLEN+HOSTLEN+2 /* n!i@h or :p@h/n%f */
#define RESTRICTEDCHARS	" ,\007\r\n" /* cannot be in names */
#define MESSAGEMAX	1024	/* including '\0' at end */
#define MBMESSAGEMAX	MB_LEN_MAX*MESSAGEMAX /* with NLS in mind */
#define FORMATMAX	120	/* max lenght of format string */

/* common Tcl/internal function prototypes */
typedef int (*Function)();

/* interface flags */
typedef enum
{
  I_INIT	= (1<<0),	/* the config maker */		/* 0x000001 */
  I_MODULE	= (1<<1),	/* module at all */
  I_FILE	= (1<<2),	/* userfile, channelfile, etc. */
//  I_BOT		= (1<<3),	/* linked bot */
  I_LISTEN	= (1<<4),	/* listening port */		/* 0x000010 */
  I_DIRECT	= (1<<5),	/* user or bot interface (telnet or DCC) */
  I_CLIENT	= (1<<6),	/* any link's client: user, channel, etc. */
  I_SERVICE	= (1<<7),	/* linked bot, server, network or service */
  I_CONSOLE	= (1<<8),	/* console if not detached */	/* 0x000100 */
  I_CONNECT	= (1<<9),	/* any IP connection */
  I_SCRIPT	= (1<<10),	/* interface to script interpreter */
  I_SHEDULE	= (1<<11),	/* sheduler request */
  I_TEMP	= (1<<12),	/* temporary interface */	/* 0x001000 */
  I_LOG		= (1<<13),	/* logfile or chat console log */
  I_DCCALIAS	= (1<<14),	/* DCC chat alias for requests (botnet chat) */
  I_QUERY	= (1<<15),	/* private query */
  I_PENDING	= (1<<16),	/* tmp, unset after request */	/* 0x010000 */
  I_FINWAIT	= (1<<17),	/* from thread for dispatcher: terminate me */
  I_LOCKED	= (1<<18),	/* this interface temporary unavailable */
  I_AUTHPASS	= (1<<19),	/* client is authenticated */
  I_DIED	= (1<<20),	/* this interface now died */	/* 0x100000 */
  I_SLEEPING	= (1<<21)	/* marked by dispatcher to wait */
} iftype_t;

/* logging/request flags */
typedef enum
{
	/* message types */
  F_T_MESSAGE	= 0,		/* default message type          --- types ---*/
  F_T_NOTICE,
  F_T_CTCP,
  F_T_CTCR,
  F_T_ACTION,
	/* message flags */
  F_PUBLIC	= (1<<4),	/* p   public msg/notice/ctcp    --- dests ---*/
  F_PRIV	= (1<<5),	/* m   msg/notice/ctcp from/to bot */
  F_BOTNET	= (1<<6),	/* n   botnet messages */
  F_USERS	= (1<<7),	/* u   user changes information  --- logs ----*/
  F_CMDS	= (1<<8),	/* c   any user command */
  F_CONN	= (1<<9),	/* b   clients connections/shares */
  F_SERV	= (1<<10),	/* s   server-related information */
  F_ERROR	= (1<<11),	/* e   correctable internal errors */
  F_WARN	= (1<<12),	/* o   different state notices/warnings */
  F_DEBUG	= (1<<13),	/* d   debug info - test purposes only */
  F_BOOT	= (1<<14),	/* i   boot time messages */
  F_JOIN	= (1<<15),	/* j   group join/part/nickch    --- public --*/
  F_MODES	= (1<<16),	/* k   mode/topic change/kick/ban */
  F_WALL	= (1<<17),	/* w   wallops/server message */
  F_QUICK	= (1<<18),	/*     high priority of request	 --- flags ---*/
  F_AHEAD	= (1<<19),	/*     priority: insert before last */
  F_REPORT	= (1<<20),	/*     this is a report */
  F_MINE	= (1<<21),	/*     this send by me not for me */
  F_SHARE	= (1<<22),	/*     message to shared bot */
  F_SHAREINFO	= (1<<23),	/*     the same but info/greeting */
  F_ASK		= (1<<24),	/*     required answer to that message */
  F_SIGNAL	= (1<<25),	/*     generate signal instead of request */
  F_END		= (1<<26),	/*     client going to down */
  F_RAW		= (1<<27),	/*     don't use charset conversions on this */
  F_ECHO	= (1<<28),	/*     session only: echo on     --- session -*/
  F_COLOR	= (1<<29),	/*     session only: enable color */
  F_COLORCONV	= (1<<30)	/*     session only: convert color to ansi/mono */
} flag_t;

#define FLAG_T		"pmnucbseodijkw"

#define F_MIN		F_PUBLIC
#define F_T_MASK	(F_MIN-1)

#define F_ASK_BOOL	0	/* message types for F_ASK */
#define F_ASK_NUMBER	1
#define F_ASK_STRING	2

#define F_PREFIXED (F_USERS | F_CMDS | F_CONN | F_SERV | F_ERROR | F_WARN | \
		    F_JOIN | F_MODES) /* those must be prefixed in some cases */

/*
 * Note: All fields here are read only until you are sure it is only for you...
 * Note2: request, returned by IFRequest() have not to set only ->from in it
 */
typedef struct req_t
{
  struct _if_t *from;		/* what interface is from */
  iftype_t mask_if;		/* type interface request is to */
  flag_t flag;			/* subflag for requested iface */
  unsigned char to[IFNAMEMAX+1]; /* mask for request filtering */
  char string[MESSAGEMAX];	/* text of request or signal */
} REQUEST;

typedef enum
{
  S_REPORT = 1,			/* generate report to loggers */
  S_FLUSH,			/* flush the interface */
  S_TIMEOUT,			/* for flood and idle detect purposes */
  S_LOCAL,			/* local purposes */
  S_REG,			/* re-register all variables */
  S_STOP,			/* pause job on interface */
  S_CONTINUE,			/* continue stopped job */
  S_SHUTDOWN,			/* flush and terminate interface (quick) */
  S_TERMINATE,			/* terminate interface and release resources */
  S_WAKEUP			/* mark interace to run in any case */
} __attribute__ ((packed)) ifsig_t;

/* return values for _if_t::IFRequest */
#define REQ_OK		0
#define REQ_RELAYED	1
#define REQ_REJECTED	-1

typedef struct _if_t INTERFACE;
typedef iftype_t (*SigFunction)(INTERFACE *,ifsig_t);

struct _if_t
{
	/* these can be safe readed when IFSignal or IFRequest started */
	/* members ift, prev, data are writable that time, rest are read only */
  unsigned char *name;		/* registered name of that type interface */
  SigFunction IFSignal;		/* entry for signals */
  int (*IFRequest) (INTERFACE *, REQUEST *); /* entry for requests */
  INTERFACE *prev;		/* for nested interface - pointer to upper */
  void *data;			/* extra data - free by Delete_Iface() */
#ifdef HAVE_ICONV
  struct conversion_t *conv;	/* charset conversions descriptor */
#endif
  iftype_t ift;			/* flagged type of interface */
  int qsize;			/* queue FIFO size */
  volatile sig_atomic_t marked;	/* marked to do NULL request */
};

typedef enum
{
  /* common access levels */
  U_DENY	= (1<<0),	/* k   user has no service access */
  U_ACCESS	= (1<<1),	/* a   user has service access */
  U_INVITE	= (1<<2),	/* e   user is welcomed to come */
  U_FRIEND	= (1<<3),	/* f   user is friend **/
  U_VOICE	= (1<<4),	/* v   user can ask me to voice him **/
  U_HALFOP	= (1<<5),	/* h   user is halfop **/
  U_OP		= (1<<6),	/* o   user is service operator */
  U_MASTER	= (1<<7),	/* m   user has full bot/channel access **/
  U_SPEAK	= (1<<8),	/* s   user can tell me to say anything */
  U_OWNER	= (1<<9),	/* n   user is the bot/channel owner **/
  U_AUTO	= (1<<10),	/* *   auto grant service access */
  U_NOAUTH	= (1<<11),	/* i   may be trusted without authentication */
  /* channel specific levels */
  U_DEOP	= (1<<12),	/* d   user must be de-opped **/
  U_QUIET	= (1<<13),	/* q   never let him get a voice **/
  /* additional flags */
  U_FLA		= (1<<14),	/* A   user defined flag */
  U_FLB		= (1<<15),	/* B   */
  U_FLC		= (1<<16),	/* C   */
  U_FLD		= (1<<17),	/* D   */
  U_FLE		= (1<<18),	/* E   */
  U_FLF		= (1<<19),	/* F   */
  U_FLG		= (1<<20),	/* G   */
  U_FLH		= (1<<21),	/* H   */
  /* record attributes */
  U_UNSHARED	= (1<<22),	/* u   private, not shared with sharebots */
  U_SECRET	= (1<<23),	/* x   ignored by "autolog" module */
  U_IGNORED	= (1<<24),	/* I   user's messages are ignored */
  U_NEGATE	= (1<<25),	/*     (pseudo-user) inverse matching */
  U_ALIAS	= (1<<26),	/*     (pseudo-user) alias */
  U_SPECIAL	= (1<<27),	/*     (pseudo-user) network/service/channel */
  U_ANY		= (1<<28)	/*     set 1 for any regular user */
} userflag;

#define USERFLAG "kaefvhomsn*idqABCDEFGHuxI"

#define U_GLOBALS (U_DENY | U_INVITE | U_FRIEND | U_VOICE | U_MASTER | \
		   U_OWNER | U_NOAUTH | U_QUIET | U_IGNORED | U_SPECIAL | U_ANY)

#define U_AND	U_ALIAS	/* channel flag, for Add_Binding() only, means match */
			/*'global AND channel' instead of default OR behavior */
#define U_EQUAL	U_ALIAS	/* channel flag, for Check_Bintable() only, means */
			/*all flags and mask are matched when they are equal */
	/* U_NEGATE for Check_Bintable() has special meaning: to never match */

#define U_NONE  (~(U_NEGATE | U_ALIAS))	/* for Add_Binding() */
#define U_ALL	(~U_NEGATE)		/* global for Check_Bindtable() */
#define U_ANYCH	(~(U_NEGATE | U_EQUAL))	/* channel for Check_Bindtable() */

#define U_IMMUTABLE (U_NEGATE | U_ALIAS | U_SPECIAL | U_ANY) /* cannot be changed */

/* return values for Inspect_Client() */
typedef enum
{
  /* 4 bits preserved for network-specific modes: online/away/etc. */
  A_OFFLINE	= 0,
  /* user specific modes */
  A_MASKED	= (1<<4),	/* host masking is on */
  A_INVISIBLE	= (1<<5),	/* invisible or local */
  A_REGISTERED	= (1<<6),	/* identified */
  A_ME		= (1<<7),	/* it's me */
  /* "user-in-public" modes */
  A_ADMIN	= (1<<8),	/* creator / admin (UltimateIRCd) */
  A_OP		= (1<<9),	/* operator */
  A_HALFOP	= (1<<10),	/* half-op / local operator */
  A_VOICE	= (1<<11),	/* voiced */
  A_DENIED	= (1<<12),	/* banned without exempt */
  A_INVITED	= (1<<13),	/* in invitation list */
  A_EXEMPT	= (1<<14),	/* exception from ban list */
  /* channel modes */
  A_RESTRICTED	= (1<<16),	/* restricted */
  A_INVITEONLY	= (1<<17),	/* invite only */
  A_MODERATED	= (1<<18),	/* moderated */
  A_ANONYMOUS	= (1<<19),	/* anonymous */
  A_QUIET	= (1<<20),	/* quiet */
  A_NOOUTSIDE	= (1<<21),	/* no outside messages */
  A_PRIVATE	= (1<<22),	/* private */
  A_SECRET	= (1<<23),	/* secret */
  A_REOP	= (1<<24),	/* server reop */
  A_TOPICLOCK	= (1<<25),	/* only ops may change topic */
  A_NOCOLOR	= (1<<26),	/* no color messages */
  A_ASCIINICK	= (1<<27),	/* us-ascii nicks only */
  A_REGONLY	= (1<<28)	/* identified users only */
} modeflag;

#define A_MODEMASK	(A_MASKED-1)

struct binding_t
{
  const char *key;		/* is matched to... */
  const char *name;		/* keyword for using by external script */
/*  unsigned int internal : 1;	       if internal binding, name == NULL */
  Function func;		/* called subprogram */
  struct binding_t *next;	/* next (not for B_UNIQ) binding */
  struct binding_t *prev;	/* previous (for B_U* types) binding */
  userflag gl_uf;		/* need global userflag for user */
  userflag ch_uf;		/* need channel userflag for user */
  int hits;			/* how many times binding was found */
};

typedef enum
{
  B_UNDEF = 0,
  B_KEYWORD,			/* for keyword */
  B_MASK,			/* for wildcards matching */
  B_MATCHCASE,			/* case-sensitive wildcards matching */
  B_UNIQ,			/* unique binding for keyword */
  B_UCOMPL,			/* unique binding for keyword with completion */
  B_UNIQMASK			/* unique binding with wildcards */
} bttype_t;

#include "protos.h"

/* conversion.c defines */
#define CHARSET_8BIT	"koi8-u" /* must be valid!!! */

/* wtmp.c defines */
#define WTMPS_MAX	12	/* maximum value of $wtmps, an year by default */
#define WTMP_GONE_EXT	"gone"	/* file extention where we keep gone events */

/* socket.c defines */

typedef short idx_t;
#define	SOCKETMAX	1024	/* max number of opened inet sockets */
#define STRICT_BACKRESOLV 1	/* define to ignore host IP=>host=>IP != IP */

/* main.c defines */
#define	CONSOLE_LOGLEV (F_PRIV | F_CMDS | F_CONN | F_USERS | F_BOOT | F_WARN | \
			F_ERROR | F_DEBUG | F_COLOR | F_COLORCONV)

/* sheduler.c defines */
#define	MAXDRIFT	3	/* max time shift to don't run "time-shift" */
