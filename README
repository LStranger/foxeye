What is FoxEye?
    FoxEye is an IRC bot that is compatible (I meant:) with Eggdrop bot. Ones
  have alike commands and Tcl interface but FoxEye has it as module.

Note for SOCKS support:
    Full functionality of bot cannot be established since SOCKS does not have
  listen port support.   If you want use the bot behind the firewall you have
  ask your system adminstrator for NAT firewall. :)

Catched signals and actions:
SIGFPE	shutdown the bot
SIGHUP	flush all
SIGILL	shutdown the bot
SIGINT	restart the bot
SIGPIPE	ignored
SIGQUIT	shutdown the bot
SIGSEGV	shutdown the bot
SIGTERM	shutdown the bot
SIGUSR1	ignored
SIGUSR2	ignored
SIGBUS	shutdown the bot
SIGSYS	shutdown the bot
SIGIO	used by sockets API

Return codes:
0	all OK
1	command line error
2	out of memory
3	init error
4	cannot create console interface
5	cannot fork
6	bot already running
7
8	internal unrecoverable error

The bot is multithreaded but created threads may run with limitations:
1) If thread have a bot interface then IFRequest() and IFSignal() are NOT
    DETACHED part of it, so thread cannot call these functions itself.
2) If thread want to call any API that using interface address or any data
    of bot interface structure, thread must call Set_Iface() or Find_Iface()
    before that and call Unset_Iface() after.

Version control.
    Any version A.Bxxx must be compatible. It means if something was changed
  in the core headers then it must be subject for version change.

Why I may need iconv?
    Iconv is a library what make a conversion from one charset to other.
  You may need it if you have a number of different character sets in your
  botnet.

What is in the core?
    Core has the code which is common or used by many modules, so it's
  vital for the bot or can avoid duplicate the code:
    - init stuff (init.c)
    - telnet/dcc login manager with little chat-like subsystem (direct.c)
    - intermodule transfer/communication manager (dispatcher.c)
    - helpfiles manager (help.c)
    - bindings manager (init.c)
    - config and formats files support (init.c)
    - common functions (lib.c)
    - terminal console driver (see -c switch) (main.c)
    - modules manager (modules.c)
    - timers API (sheduler.c)
    - sockets API (socket.c)
    - listfile manager (list.c)
    - eventsfile manager (wtmp.c)
