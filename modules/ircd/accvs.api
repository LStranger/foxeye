
 Module "ircd":
 --------------

  Interfaces: accepts messages for I_SERVICE with name <network> to run
  them as if they came anywhere else from (_s_r_v below) but as exception
  message can be some numeric and in that case it will be forwarded to
  target user thru "ircd-do-numeric" bindtable, that message will be put
  at end of target's queue. If message has no prefix then the server
  itself will be assumed as message source.

  accepts messages for I_CLIENT with name <name>@<network> to send them
  to valid recipient in network (note: if <name> is "" then recipient is
  every local user and if <name> is "*.*" then recipient is every local
  server link); messages have to have prefix.

  Note: Inspect_Client() function for this module is case-sensitive for
  nicks or server names to be as fast as possible and avoid undesired
  case conversions (but still case-insensitive for channel names). The
  lname in returned data contains either nick of who set topic (if that
  data are available), or ident of the user.

-     "iirrccdd--aauutthh"      MASK
  int func(struct peer_t *_p_e_e_r, char *_u_s_e_r, char *_h_o_s_t, const char **_m_s_g,
	   modeflag *_u_m_o_d_e);
    Used when listening socked just accepted connection from someone _p_e_e_r
    and binding gets their _u_s_e_r and _h_o_s_t for authentication check (for
    example, check if host is in SPAM hosts database). Binding is called
    within thread so should use only thread-safe functions. Dispatcher is
    locked on start so at first you have to call Unset_Iface() and then
    perform all your checks. Connection chain for peer is initialized so
    you can send something there (but that is not advisable because it
    may ruin IRC protocol). If binding denies access for that client then
    it should return 0 and leave reason message into _m_s_g. The binding may
    also set some modeflag in initial _u_m_o_d_e if needed.
      Matching: host.  (userflags are ignored)
      Matching stops after first access failure.

-     "iirrccdd--rreeggiisstteerr--ccmmdd" UNIQ
  int func(INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, int _a_r_g_c, const char **_a_r_g_v);
    Used when server got some message from client _p_e_e_r that have not
    registered yet. Message is parsed and put into array _a_r_g_v so _a_r_g_c
    contains number of parameters that was given to command. _p_e_e_r->dname
    contains nick of _p_e_e_r. _s_r_v is IRCD interface which can be used to
    send control messages (commands). This bindtable is designed mostly
    for internal "ircd" module usage so may be not so useful.
      Matching: command.  (userflags are ignored)

-     "iirrccdd--cclliieenntt--ccmmdd" UNIQ
  int func(INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, const char *_l_c_n_i_c_k,
	   const char *_u_s_e_r, const char *_h_o_s_t, const char *_v_h_o_s_t,
	   modeflag _e_u_m, int _a_r_g_c, const char **_a_r_g_v);
    Used when server got some message from local client _p_e_e_r. Message is
    parsed and put into array _a_r_g_v so _a_r_g_c contains number of parameters
    that was given to the command. _p_e_e_r->dname contains nick of sender,
    _u_s_e_r and _h_o_s_t are from client connection, and converted to lower case
    sender nick _l_c_n_i_c_k is provided to use with Inspect_Client() function.
    The visible host _v_h_o_s_t and user mode flags _e_u_m effective for change
    are also provided. _s_r_v is IRCD interface which can be used to send
    control messages (commands). Value -1 returned by binding means this
    command should not reset idle time calculation.
      Matching: command.  (channel userflags are ignored, used by HELP)

-     "iirrccdd--sseerrvveerr--ccmmdd" KEYWORD
  int func(INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, unsigned short _t_o_k_e_n,
	   const char *_s_e_n_d_e_r, const char *_l_c_s_e_n_d_e_r, int _a_r_g_c,
	   const char **_a_r_g_v);
    Used when server got some message from local server link _p_e_e_r (which
    can be NULL if command invoked internally). Message is parsed and put
    into array _a_r_g_v so _a_r_g_c contains number of parameters that was given
    to the command. _p_e_e_r->dname contains name of _p_e_e_r, _s_e_n_d_e_r is supplied
    by _p_e_e_r and is name of _p_e_e_r (or server's own name in case of _p_e_e_r is
    NULL) if it was not provided in command. Converted to lower case
    version of _s_e_n_d_e_r is also provided as _l_c_s_e_n_d_e_r for Inspect_Client()
    function call. The _t_o_k_e_n of server of the _s_e_n_d_e_r is also provided.
    _s_r_v is IRCD interface which can be used to send control messages
    (commands). Value -1 returned by binding means this command should
    not reset idle time calculation.
      Matching: command.  (userflags are ignored)

-     "iirrccdd--llooccaall--cclliieenntt" MASK
  (int) void func (INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, modeflag _u_m);
    Used when an user _p_e_e_r has been succesfully registered on the server
    and propagated to others. _s_r_v is IRCD interface which can be used to
    send control messages (commands). User mode _u_m also provided for any
    checks.
      Matching: user nick.  (channel userflags are ignored)

-     "iirrccdd--cclliieenntt"    MASK
  (int) void func (INTERFACE *_s_r_v, const char *_f_r_o_m, const char *_l_c_n_i_c_k,
		   const char *_n_i_c_k, const char *_n_n_i_c_k, const char *_u_s_e_r,
		   const char *_h_o_s_t, const char *_f_n_a_m_e, modeflag _u_m,
		   unsigned int _l_e_f_t);
    Used when list of names in the network was changed, i.e. either user
    or service succesfully entered network, left network, or user changed
    their nick name. Binding is supplied with last seen _n_i_c_k of client,
    connection parameters _u_s_e_r and _h_o_s_t, full name _f_n_a_m_e, umode _u_m, and
    server which client was connected _f_r_o_m before the change happened.
    If that is new client then binding gets _n_i_c_k equal to NULL. In that
    case or in case of nick change _n_n_i_c_k will contain new user nick or
    service name. As binding can be used for services too, in that case
    parameters _u_s_e_r and _h_o_s_t will be empty strings. Parameter _l_e_f_t is
    total number of clients known for the server at the event time, that
    number includes every server, service, user, incomplete connection,
    and every nick, remembered due to network splits or nick collision
    reasons. Converted to lower case _n_i_c_k is also supplied for binding as
    _l_c_n_i_c_k. _s_r_v is IRCD interface which can be used to send control
    messages (commands).
      Macthing: user nick.  (userflags are ignored)

-     "iirrccdd--ddoo--nnuummeerriicc" UNIQ
  int func (INTERFACE *_s_r_v, int _n, const char *_n_i_c_k, modeflag _u_m,
	    char *_m_s_g);
    Used when module "ircd" is about to send some numeric message which
    has number _n and text _m_s_g for user _n_i_c_k which has umode _u_m so binding
    can cancel sending it or do that itself, in that case binding should
    return a non-zero value. _s_r_v is IRCD interface which can be used to
    send control messages (commands).
      Matching: numeric.  (userflags are ignored)

-     "iirrccdd--cchhaannnneell"   UNIQ
  (int) modeflag func(INTERFACE *_u, modeflag _u_m_o_d_e, modeflag _c_h_m_o_d_e,
		      int _c_o_u_n_t, const char *_c_h_n_a_m_e, NODE *_c_l,
		      const char **_t_o_c_r_e_a_t_e);
    Used when some user _u which has mode _u_m_o_d_e attempts to join channel
    _c_h_n_a_m_e which has mode _c_h_m_o_d_e and _c_o_u_n_t users in it. If _c_h_m_o_d_e is equal
    to 0 (i.e. channel does not exist) and user is allowed to create new
    channel then puts new (which is in static array) channel name into
    _t_o_c_r_e_a_t_e but be sure to check _c_h_m_o_d_e too since channel may not exist
    but be on hold. Binding can perform channel type specific checking
    on channels list _c_l. Returns modes which should be set on channel
    for user if user is allowed to join or 0 if isn't. Used also when
    user leaves channel, in that case _t_o_c_r_e_a_t_e pointer is NULL, binding
    returns new channel's modeflag after that leave (so if it's 0 then
    channel should be destroyed). Interface _u can be used to send channel
    specific notes (numerics) to the local user, those numerics will
    never go through bindtable "ircd-do-numeric". That _u pointer is NULL
    if this is remote user.
      Matching: channel name's first char.  (userflags are ignored)

-     "iirrccdd--cchheecckk--mmeessssaaggee" MASK
  int func(modeflag _u_m_o_d_e, modeflag _m_m_o_d_e, char *_m_s_g);
    Used when someone with channel mode _u_m_o_d_e is trying to send a message
    _m_s_g into some channel with modes _m_m_o_d_e. Returns 1 in case if sending
    is allowed, -1 if it may be allowed (i.e. allowed until other binding
    disallowed it), or 0 if it is disallowed. If no appropriate binding
    was found then message will be allowed.
      Matching: target.  (userflags are ignored)
      Matching stops after first binding call that returns 1.

-     "iirrccdd--cchheecckk--mmooddeecchhaannggee" MASK
  int func(INTERFACE *_u, modeflag _u_m_o_d_e, const char *_c_h_n, modeflag _c_m_o_d_e,
	   int _a_d_d, modeflag _c_h_g, const char *_t_g_t, modeflag _t_u_m_o_d_e,
	   modeflag _t_c_m_o_d_e);
    Used when someone with channel mode _u_m_o_d_e trying to make a modechange
    _c_h_g for some target _t_g_t which has user mode _t_u_m_o_d_e and channel mode
    _t_c_m_o_d_e on the channel _c_h_n with modes _m_m_o_d_e. Binding gets modechange
    which consists of all mode flags received from all matching bindings
    of "ircd-modechange" bindtable. _a_d_d indicates direction of the change
    and is 0 in case if it is attempt to down mode and is 1 in case if it
    is attempt to raise mode. Binding also may be called when user either
    attempts to join channel or changes their nick, and in that case _t_g_t
    is user nick, _u_m_o_d_e is user mode and _c_h_g is 0. In latter case if
    binding denies the join, it should send a message to the user using
    user interface _u (it's NULL if user is remote). Returns 0 in case
    if modechange should be rejected or any other value otherwise.
      Matching: channel name.  (userflags are ignored)
      Matching stops after first reject.

-     "iirrccdd--mmooddeecchhaannggee" MATCHCASE
  (int) modeflag func(modeflag _r_c_h_m_o_d_e, modeflag _r_m_o_d_e,
		      const char *_t_a_r_g_e_t, modeflag _t_m_o_d_e,
		      modeflag _t_u_m_o_d_e, int _a_d_d, char _c_h_t_y_p_e,
		      int (**_m_a)(INTERFACE *_s_r_v, const char *_r_q,
				 const char *_c_h, int _a_d_d,
				 const char **_p_a_r_a_m));
    Used when some client which has channel mode _r_c_h_m_o_d_e and user mode
    _r_m_o_d_e sent command for some mode change on channel of type _c_h_t_y_p_e in
    direction _a_d_d (which is 0 if it's an attempt to down mode or 1 if
    it's attempt to raise mode) for some _t_a_r_g_e_t on the channel which has
    channel mode _t_m_o_d_e and user mode _t_u_m_o_d_e (see bindtable "ircd-whochar"
    in regard of modechanges for users in channel). In case if it's
    attempt of changing mode for the channel (itself) then _t_a_r_g_e_t is
    NULL, and _t_m_o_d_e is channel mode. In case if that change requires a
    parameter then _m_a on return should be filled with pointer to function
    to set/clear/query the mode, in such case binding match mask should
    be "X*". The function _m_a may get _a_d_d equal to -1 for mode query and
    will get also channel name _c_h and parameter _p_a_r_a_m (and if it was a
    mode query then no parameter _p_a_r_a_m is provided) for the requested
    modechange. The function _m_a should return 1 on success, 0 on fail, or
    -1 if change was ignored (if ban already exists for example). The
    function _m_a can replace pointer to _p_a_r_a_m if it must be rewritten on
    further mode broadcast. Since function _m_a is called only on actual
    request, it may use interface _s_r_v to send numeric messages to the
    client _r_q. The binding returns modeflag change for target if it's
    approved combined with lowest bit set to 1 if that modechange should
    consume a parameter (even if change isn't approved). If change is not
    approved due to missing original channel creator privileges then
    binding should set bit A_PINGED in returned value. The binding also
    should support "test mode" when it is called with invalid value of
    parameter _r_c_h_m_o_d_e equal to 0 and with appropriate value of _t_a_r_g_e_t, in
    such case the binding should return appropriate mode flag, setting _m_a
    isn't required. Note: you have to send S_FLUSH signal to modules
    "ircd*" each time you adding or removing a binding so those modules
    can build their list of all supported flags to reply to user on
    request.
      Matching: modechar.  (userflags are ignored)

-     "iirrccdd--uummooddeecchhaannggee" MATCHCASE
  (int) modeflag func(modeflag _r_u_m_o_d_e, int _a_d_d,
		      void (**_m_a)(INTERFACE *_s_r_v, const char *_r_q,
				  char *_v_h_o_s_t, const char *_h_o_s_t,
				  size_t _v_h_s, int _a_d_d,
				  const char *_s_e_r_v_n_a_m_e));
    Used when some client with given user mode _r_u_m_o_d_e sent command for
    some mode change on themself in direction _a_d_d (which is 0 if it's an
    attempt to down mode or 1 if it's attempt to raise mode). Returns
    modeflag change if it approved. May return 1 if change is allowed but
    should be ignored. The binding also should support "test mode" when
    is called with invalid value of parameter _r_u_m_o_d_e equal to 0, in such
    case the binding should return appropriate mode flag. There is also
    special support for VHOST feature where visible host is different
    from real one - binding should set a pointer to function which makes
    such visible host into _m_a. Since function _m_a is called only on actual
    request, it may use interface _s_r_v to send numeric messages to the
    client _r_q. That function receives pointer (_v_h_o_s_t) and size _v_h_s of
    visible host data buffer, real _h_o_s_t and direction _a_d_d, the name of
    server for client is also provided as _s_e_r_v_n_a_m_e.
      Matching: modechar.  (userflags are ignored)

-     "iirrccdd--wwhhoocchhaarr"   MASK
  (int) char func(char _m_o_d_e_c_h_a_r);
    Used on start or S_FLUSH signal to make translation from modechange
    character _m_o_d_e_c_h_a_r into character for WHO reply. You have to send
    S_FLUSH signal to module "ircd" each time you adding or removing a
    binding. Returns appropriate char or 0 if there is no one.
      Matching: network name.  (userflags are ignored)

-     "iirrccdd--cclliieenntt--ffiilltteerr" KEYWORD
  int func(INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, modeflag _u_m_o_d_e, int _a_r_g_c,
	   const char **_a_r_g_v);
    Used before "ircd-client-cmd" bindtable so you can intercept and
    cancel executing any bindings in it by returning zero value. Binding
    receives the same _s_r_v, _p_e_e_r, _a_r_g_c, and _a_r_g_v parameters that binding
    for "ircd-client-cmd" will do and also user mode flags _u_m_o_d_e. Also
    used before "ircd-register-cmd" so _a_r_g_v may vary and nick of the
    client may be not known yet. Binding may return value bigger than 1
    if it wants increased penalty for the message. If binding returns 0
    (so denies executing) then no ERR_UNKNOWNCOMMAND will be sent so it's
    in binding hands to send some numeric reply to user instead or simply
    silently ignore the message.
      Matching: command.  (channel userflags are ignored)
      Matching stops after first reject.

-     "iirrccdd--ssttaattss--rreeppllyy" KEYWORD
  (int) void func(INTERFACE *_s_r_v, const char *_r_q, modeflag _m_f);
    Used when server got request STATS from some user which has nick _r_q
    and user mode _m_f. _s_r_v is IRCD interface which can be used to send
    control messages (commands).
      Matching: STAT request parameter.  (userflags are ignored)

-     "iirrccdd--ccoolllliissiioonn" UNIQMASK
  int func(INTERFACE *_s_r_v, char *_n_e_w, size_t _n_s_i_z_e, const char *_e_s_e_r_v,
	   const char *_n_s_e_r_v);
    Used when server got nick collision for some nick _n_e_w. Binding have
    to propose some solution to resolve this issue. If binding proposes
    to kill both users then it should return -1. If binding proposes to
    kill one of users then it should return 0 to keep existing user or 1
    to keep colliding user. If binding proposes to rename a user then it
    should make a nick for it in buffer _n_e_w of size _n_s_i_z_e and return 2 in
    case if existing user should be renamed or 3 in case if colliding
    user should be renamed. If that returned nick is indentical to any
    existing one then the user will be not renamed but killed instead.
    Server interface _s_r_v is provided so binding can make required checks.
    Parameters _e_s_e_r_v and _n_s_e_r_v are names of servers of those existing and
    colliding users, and in case if existing user is a local one, _e_s_e_r_v
    will be NULL.
      Matching: anything.  (userflags are ignored)

-     "iirrccdd--sseett--mmeessssaaggee--ttaarrggeettss" MASK
  int func (INTERFACE *_s_r_v, const char *_s_e_n_d_e_r, const char *_t_a_r_g_e_t,
	    int (*_n_e_x_t)(INTERFACE *_s_r_v, const char *_m_a_s_k,
			const char **_l_c_n_a_m_e, modeflag *_m_f, int **_m_a_r_k,
			void **_i_t_e_r));
    Used when server processes some message not for exact target name but
    for a mask _t_a_r_g_e_t. Binding can process matching using function _n_e_x_t
    which receives input _s_r_v, some _m_a_s_k that binding makes from _t_a_r_g_e_t,
    and pointer _i_t_e_r to the iterator data (which should be set to NULL
    initially). The function _n_e_x_t will return 0 when list is exhausted,
    otherwise it will return 1 and set found client data: nick converted
    to lower case _l_c_n_a_m_e and current modes _m_f for the original reguest
    context. Binding also gets requestor nick _s_e_n_d_e_r. If binding decides
    that found client matches criteria then it should set _m_a_r_k to 1.
      Matching: target mask.  (userflags are ignored)

-     "iirrccdd--wwhhooiiss"     MASK
  (int) void func(INTERFACE *_s_r_v, const char *_s_e_n_d_e_r, modeflag _s_u_m_f,
		  const char *_t_a_r_g_e_t, const char *_t_h_o_s_t,
		  const char *_v_h_o_s_t, modeflag _t_u_m_f);
    Used when server replies to a WHOIS query from some _s_e_n_d_e_r with user
    mode _s_u_m_f for some _t_a_r_g_e_t which has host _t_h_o_s_t and user mode _t_u_m_f.
    Binding can send some numeric reply then to the client using IRCD
    interface _s_r_v.
      Matching: target.  (userflags are ignored)

-     "iirrccdd--cchheecckk--sseenndd" MATCHCASE
  int func(INTERFACE *_s_r_v, struct peer_t *_t_g_t, modeflag _t_u_m, char *_m_s_g,
	   size_t _m_s);
    Used when message _m_s_g in buffer of size _m_s is about to be sent to a
    local link _t_g_t which has mode _t_u_m at this moment. Binding can either
    leave message intact, or rewrite the message, or put another message
    for client using either interface pointer in _t_g_t or IRCD interface
    _s_r_v. Note that message _m_s_g is in client's encoding. Also note that
    message which is sent using interface pointer in _t_g_t will miss any
    filtering (through "ircd-do-numeric" bindtable for example) but the
    "ircd-check-send" filtering on next send. Returns 0 if the message
    should be discarded.
      Matching: message type (command).  (userflags are ignored)

-     "iirrccdd--iissuuppppoorrtt"  MASK
  (int) void func(char *_b_u_f_f, size_t _b_u_f_f_s_i_z_e);
    Used when RPL_ISUPPORT going to be sent to client, so binding can add
    some messages to it putting them into _b_u_f_f of _b_u_f_f_s_i_z_e.
      Matching: own server name.  (userflags are ignored)

-     "iirrccdd--ggoott--sseerrvveerr" MASK
  (int) void func (INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, modeflag _u_m,
		   unsigned short _t_o_k_e_n, const char *_f_l_a_g_s);
    Used when a server _p_e_e_r has been succesfully registered locally and
    propagated to others. _s_r_v is IRCD interface which can be used to send
    control messages (commands). Mode _u_m, server _t_o_k_e_n and negotiated
    connection _f_l_a_g_s are also provided for any checks. This binding is
    done before burst so binding can remember the server and module may
    consider it in further processing.
      Matching: server name.  (userflags are ignored)

-     "iirrccdd--lloosstt--sseerrvveerr" MASK
  (int) void func (INTERFACE *_s_r_v, struct peer_t *_p_e_e_r);
    Used when a local server _p_e_e_r is disconnecting from network. _s_r_v is
    IRCD interface which can be used to send control messages (commands).
      Matching: server name.  (userflags are ignored)

-     "iirrccdd--eeoobb"       MASK
  (int) void func(INTERFACE *_s_r_v, struct peer_t *_p_e_e_r,
		  const char *_c_h_n_a_m_e, modeflag _m_f, int _i_s___l_a_s_t);
    Used when ircd has finished burst of a channel _c_h_n_a_m_e to the server
    _p_e_e_r after initial handshake. Binding is provided with mode _m_f of the
    channel. _i_s___l_a_s_t is TRUE if this was a last channel sent (therefore
    it's end of whole burst). _s_r_v is IRCD interface which can be used to
    send control messages (commands).
      Matching: channel name.  (userflags are ignored)

-     "iirrccdd--ddrroopp--uunnkknnoowwnn" MASK
  (int) void func(INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, const char *_u_s_e_r,
		  const char *_h_o_s_t);
    Used when some not registered yet client _p_e_e_r which had connection
    parameters _u_s_e_r and _h_o_s_t disconnects from the server.
      Matching: client's host.  (userflags are ignored)

-     "iirrccdd--sseerrvveerr--hhaannddsshhaakkee" MASK
  int func(INTERFACE *_s_r_v, struct peer_t *_p_e_e_r, const char *_n_a_m_e);
    Used before server sends a handshake message (PASS) to some _p_e_e_r
    which presumably will be registered as a server (either uplink or
    downlink). _p_e_e_r is fully functional and may be used to send messages.
    Be aware that may disrupt IRC protocol and peer buffers may not have
    enough space. Client _n_a_m_e and server interface _s_r_v are provided for
    convenience. Returns length of message if any was sent.
      Matching: peer's host.  (userflags are ignored)
