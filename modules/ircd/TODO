#define IRCD_MULTICONNECT 1 // define if protocol allows cyclic network scheme

/* if multiconnect is allowed then:
√  a) new commands IPRIVMSG INOTICE ISQUERY ITOPIC IMODE INUM are implemented,
      ids are checked to avoid dups
√  b) any transit queries should go ONLY by the shortest way to avoid dups
√  c) all other commands (few really) should allow multiple instances
   d) duplicate instances should go to dprint(2,...) and ignored
   e) duplicate MODEs that way will be ignored even if they came from another
      originator - should we send some NOTICE to local link on them?
√  f) command should be never send to originator back
√  g) new commands should be never sent to old servers
√  h) if new server get multiconnected via old server then old server should
      get SQUIT in that reason so only new server first instance stays
√  i) new server gives me connection option I (id allowed)
√  j) ids consist of cyclic message-number
√  k) each QUIT, nickchange, SQUIT, KILL, KICK or PART have to be confirmed
      with ACK from the other side so we will not get delayed PART for already
      rejoined user for example
√  l) ACK command is simple: ACK COMMAND who :where
√  m) option I is broadcasted by sending ISERVER instead of SERVER
   n) SQUIT from operators should break all server's links? #define ?
   o) if servers exchange opposite messages (NICK against NICK) then priority
      is for the side who accepted connection and initiated side should raise
      collision change - see below
   p) RFC2813:5.6 isn't required for new servers due to ACK race resolving

*** About servers protocol: we trust servers and should correct them as much as
    possible without SQUIT, sending back corrections but there should be some
    threshold in corrections, as soon we reach it we anyway send them SQUIT.

*** Nick change conflicts (change from nick on hold to something):
√   - if it uplink then I send ACK and collision change, remember collided
√   - if it downlink I send no ACK but change from proposed to my change back
√   - if I get change from waiting ACK to collided - it should be as if I got
      ACK translated into waiting and change to collided so I send ACK for
      that duplicated change and wait ACK for my collision change
√   - both waiting and collided should be translated into changed one
√   - if I get any of those from any link I send them collision change so I
      keep only the changed active
√   - if I get any KILL, MODE, KICK for holded I transfer it to changed
    * it should be in sync after this! */
