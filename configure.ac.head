dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.51)
AC_INIT([FoxEye], 0.10.1,, foxeye, [http://foxeye.sf.net])
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE

AC_CANONICAL_HOST

dnl Checks for programs.
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PATH_PROG(BASENAME, basename)
AC_PATH_PROG(BASH, bash)
AC_PATH_PROGS(XGETTEXT, [gxgettext xgettext])

dnl Some non-standard compiler defaults
if test "x$CC" = x; then
    case "$host_os" in
	bsd*)
	    if test ! "${host_os}" = bsdi2; then
		CC="shlicc"
	    fi
	    ;;
	solaris*)
	    CC="c99"
	    AC_PATH_PROG(GMAKE, gmake)
	    if test -z "$ac_cv_path_GMAKE"; then
		AC_MSG_ERROR([gmake required for compilation of FoxEye.])
	    fi
	    MAKE="$ac_cv_path_GMAKE"
	    FORCE_GMAKE="MAKE = $ac_cv_path_GMAKE"
	    AC_SUBST(FORCE_GMAKE)
	    ;;
	*)
	    ;;
    esac
fi
if test "x$CC" != x; then
    AC_MSG_RESULT(compiler is set to $CC)
fi

dnl Checks for C compiler features
: ${CFLAGS=""}
AC_PROG_CC
AC_PROG_CC_C99
AC_USE_SYSTEM_EXTENSIONS
# AC_PROG_CXX
AC_C_CONST
AC_C_VOLATILE
AC_C_INLINE

dnl Checks for system features to implement optimizations
# AC_C_BIGENDIAN
# AC_CHECK_SIZEOF(int)

ac_default_prefix="${HOME}/${PACKAGE}"
m4_pattern_allow(LIBOBJ)

if test "$ac_cv_c_inline" != no ; then
    AC_DEFINE(HAVE_INLINE, 1, [Define to 1 if you have working `inline' modifier.])
    AC_SUBST(HAVE_INLINE)
fi

dnl Default linker for the modules
CCLIB="\$(CC)"

dnl Checks for options to CFLAGS
AC_CHECK_LDFLAG(fe_cv_add_wnotrigraphs, -Wno-trigraphs, CPPFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wnolonglong, -Wno-long-long, CPPFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wnopointersign, -Wno-pointer-sign, CPPFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wnounusedparameter, -Wno-unused-parameter, CPPFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wall, -Wall, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_pipe, -pipe, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_fshortenums, -fshort-enums, CPPFLAGS)

dnl Do we want debug or optimization?
AC_ARG_ENABLE(debug,
    [  --enable-debug[[=info]]   creates debugging code],
    fe_enable_debug="$enableval", fe_enable_debug="no")
    if test x"$fe_enable_debug" = xno; then
	dnl enable optimization - this is default
	ac_cv_add_optimization=yes
	dnl Adding -S (strip debug) to linker
	AC_CHECK_LDFLAG(fe_cv_add_s, [-Wl,-S], LDFLAGS)
    else
	dnl disable optimization and add extra warnings if it's debug compilation
	if test x"$fe_enable_debug" = xinfo; then
	    ac_cv_add_optimization=yes
	else
	    ac_cv_add_optimization=no
	fi
	AC_CHECK_LDFLAG(fe_cv_add_g, -g, CFLAGS)
	AC_CHECK_LDFLAG(fe_cv_add_wextra, -Wextra, CPPFLAGS)
    fi
if test $ac_cv_add_optimization = yes; then
    dnl Compiler specific options
    case "$CC" in
	c99*)
	    AC_CHECK_LDFLAG(fe_cv_add_erroff, -erroff, CPPFLAGS)
	    AC_CHECK_LDFLAG(fe_cv_add_fast, -fast, CPPFLAGS)
	    fe_save_CC="$CC"
	    CC="c99 -fast"
	    AC_CHECK_LDFLAG(fe_cv_add_xipo, -xipo=2, CPPFLAGS)
	    CC="$fe_save_CC"
	    AC_CHECK_LDFLAG(fe_cv_add_xrestrict, [-xrestrict=%all], CPPFLAGS)
	    AC_CHECK_LDFLAG(fe_cv_add_xinline, [-xinline=%auto], CPPFLAGS)
	    ;;
	*)
	    AC_CHECK_LDFLAG(fe_cv_add_oo, -O2, CFLAGS)
	    dnl GCC 3.x guess wrong about strict aliasing
	    fe_save_CFLAGS="$CFLAGS"
	    CFLAGS="$CFLAGS -Werror"
	    AC_TRY_COMPILE([struct atest {
char *s; };], [struct atest *a;
void **v = (void **)&a;
*v = (void *)a;
], [CFLAGS="$fe_save_CFLAGS"], [CFLAGS="$fe_save_CFLAGS"
		AC_CHECK_LDFLAG(fe_cv_add_fnostrictaliasing, -fno-strict-aliasing, CPPFLAGS)
	    ])

	    ;;
    esac
fi

dnl Need to make static code?
AC_ARG_ENABLE(static,
    [  --enable-static         build static code],
    [ unset fe_cv_static
    if test $enableval = yes; then
        fe_enable_static=yes
    fi], [fe_enable_static=no])

AC_CACHE_CHECK([whether you need static compiling], fe_cv_static,
[  fe_cv_static="$fe_enable_static"
if test "$fe_cv_static" = no; then
    case "$host_os" in
	linux* | kfreebsd* | gnu | freebsd* | openbsd* | netbsd*)
	    ;;
	bsd*)
	    AC_MSG_RESULT(BSD/OS, ok)
	    AC_MSG_CHECKING(again for static)
	    if test "${host_os}" = bsdi2; then
		fe_cv_static=yes
	    fi
	    ;;
	solaris* | sunos* | hpux)
	    ;;
	*)
	    # I don't know how to builf modules on other platforms
	    # Will try to run, maybe fall on the start...
	    fe_cv_static=yes
	    ;;
    esac
fi ])

if test "$fe_cv_static" = no; then
    case "$host_os" in
	linux* | kfreebsd* | gnu)
	    CCLIB="${CCLIB} -shared -nostartfiles"
	    AC_CHECK_LDFLAG(fe_cv_fpic, [-fpic], CPPFLAGS)
	    ;;
	freebsd*)
	    CCLIB="${CCLIB} -shared"
	    CPPFLAGS="-fpic ${CPPFLAGS}"
	    AC_DEFINE(_FREEBSD, 1, [Define to 1 if on FreeBSD.])
	    ;;
	openbsd* | netbsd*)
	    CCLIB="${CCLIB} -Wl,-x -Wl,-Bshareable"
	    CPPFLAGS="-fpic ${CPPFLAGS}"
	    AC_DEFINE(_OPENBSD, 1, [Define to 1 if on OpenBSD.])
	    ;;
	bsd*)
	    if test ! "${host_os}" = bsdi2; then
		LD="shlicc -r"
	    fi
	    ;;
	solaris*)
#	    LD="ld -G -z text"
	    dnl A hack is here - we block -Wl,-z,defs which wants main()
	    CCLIB="${CCLIB} -Wl,-G -Wl,-z,nodefs"
	    AC_CHECK_LDFLAG(fe_cv_add_wl_e, [-Wl,-E], LDFLAGS)
	    ;;
	sunos*)
	    dnl LD="ld"
	    CPPFLAGS="-fPIC ${CPPFLAGS}"
	    AC_CHECK_LIB(dl,main)
	    ;;
	hpux)
	    CCLIB="${CCLIB} -Wl,-b, -Wl,-E"
	    CPPFLAGS="-fPIC ${CPPFLAGS}"
	    AC_DEFINE(_HPUX, 1, [Define to 1 if on HP-UX.])
	    ;;
	*)
	    ;;
    esac
fi

dnl Some substitutions for modules/Makefile.mods
case `eval "${MAKE-make} -v -f NoFile 2>/dev/null"` in
    GNU*)
	MAKE_IS_GNU=true
	;;
    *)
esac
AM_CONDITIONAL([MAKE_IS_GNU], [test x$MAKE_IS_GNU = xtrue])

dnl AM_ICONV uses strange variable ac_t in reports so reset it now
ac_t=
AC_CHECK_ICONV

AC_CHECK_IPV6

dnl Checks for multithreaded heap managers
AC_SEARCH_LIBS(mallocctl, mtmalloc) dnl Sun's MTmalloc
AC_HAVE_LIBRARY(hoard) dnl Not sure if it works that way

dnl Check for libthr presence (it has thread-safe libc functions on FreeBSD)
AC_HAVE_LIBRARY(thr)

dnl Checks for libraries and extensions
AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(connect, nsl)
AC_SEARCH_LIBS(getaddrinfo, [dns nsl])
AC_SEARCH_LIBS(inet_ntop, nsl)
AC_SEARCH_LIBS(clock_gettime, rt)

if test "$fe_cv_static" = no; then
    AC_SEARCH_LIBS(dlopen, dl,
	[AC_DEFINE(HAVE_DLOPEN, 1, [Define to 1 if you have the `dlopen' function.])],
	[AC_MSG_WARN([    Sorry, modules are not available now])
	fe_cv_static=yes
    ])
fi

dnl Checks for threads.
AC_SEARCH_LIBS(pthread_cancel, [c_r pthread], [fe_cv_have_pthreads=yes],
    [AC_MSG_ERROR([you cannot compile without threads support.
      Install pthreads library and then run configure again.])
])
AC_CHECK_LDFLAG(fe_cv_add_pthread, -pthread, CFLAGS)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS(unistd.h dlfcn.h crypt.h getopt.h limits.h posix1_lim.h)
AC_CHECK_HEADERS(fcntl.h strings.h stdint.h sys/filio.h thread.h wctype.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_PID_T
AC_TYPE_UID_T
# AC_CHECK_MEMBERS([struct sigaction.sa_handler],,,[#include <signal.h>])

if test "$fe_cv_static" = yes; then
    EXTRA_HDR='${top_srcdir}/core/static.h'
    CPPFLAGS="${CPPFLAGS} -DSTATIC"
    LD_MODS="../modules/*/*.o"
    dnl LD="${CC}"
    AC_CHECK_LDFLAG(fe_cv_add_static, [-static], LDFLAGS)
    if test $fe_cv_add_static = no; then
	AC_CHECK_LDFLAG(fe_cv_add_Bstatic, [-Bstatic], LDFLAGS)
    fi
else
    dnl Check for -rdynamic option to LDFLAGS
    AC_CHECK_LDFLAG(fe_cv_add_rdynamic, -rdynamic, LDFLAGS)
    dnl Try to be more strict on dynamic objects
    AC_CHECK_LDFLAG(fe_cv_add_O1, [-Wl,-O1], LDFLAGS)
    AC_CHECK_LDFLAG(fe_cv_add_z_defs, [-Wl,-z,defs], LDFLAGS)
fi
AM_CONDITIONAL([STATICBUILD], [test x$fe_cv_static = xyes])

dnl Checks for library functions.
AC_CHECK_FUNCS(rename sigaction strncasecmp towlower)

AC_CACHE_CHECK([whether you need libcrypt], ac_cv_need_libcrypt,
[
    ac_cv_have_crypt=yes
    AC_TRY_LINK([], [crypt ("","");], [ac_cv_need_libcrypt=no],
	[save_LIBS="${LIBS}"
	LIBS="-lcrypt ${LIBS}"
	AC_TRY_LINK([], [crypt ("","");], [ac_cv_need_libcrypt=yes],
	    [ac_cv_need_libcrypt=no
	    ac_cv_have_crypt=no
	])
	LIBS="${save_LIBS}"
    ])
])
if test "$ac_cv_have_crypt" = no; then
    AC_MSG_ERROR([you have no encryption library but need it for password save.])
fi
if test "$ac_cv_need_libcrypt" = yes; then
    LIBS="-lcrypt ${LIBS}"
fi

AC_REPLACE_FUNCS(strcasecmp)

AC_CHECK_FUNC(rwlock_init, [AC_DEFINE(HAVE_RWLOCK_INIT)
    AC_CHECK_LDFLAG(fe_cv_add_mt, -mt, CFLAGS)],
    [AC_CHECK_FUNCS(pthread_rwlock_init)
])
if test "$ac_cv_func_rwlock_init" = no -a "$ac_cv_func_pthread_rwlock_init" = no
then
    AC_REPLACE_FUNCS(rwlock_init)
fi

GENDATE="`LC_TIME=C date +'%B %Y'`"
AC_SUBST(GENDATE)
AC_DEFINE_UNQUOTED(COMPILETIME, "`LC_TIME=C date`", [The compilation time string.])

AC_SUBST(CCLIB)
AC_SUBST(LD_MODS)
AC_SUBST(BASENAME)
AC_SUBST(EXTRA_HDR)
AC_SUBST(MODLIBS)
AC_SUBST(STATICLIBS)

AM_GNU_GETTEXT
AC_SYS_LONG_FILE_NAMES

AC_CHECK_LIBIDN

AC_CONFIG_FILES(Makefile \
        doc/Makefile \
        help/Makefile \
        scripts/Makefile \
	tree/Makefile \
        modules/Makefile \
	modules/Makefile.mods \
        core/Makefile \
	core/init.h \
	intl/Makefile \
	ui/Makefile \
	po/Makefile.in \
	doc/foxeye.1 \
	foxeye.pc)

