dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.50)
AC_INIT(core/foxeye.h)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(foxeye, 0.9b10)

AC_CANONICAL_HOST

AC_USE_SYSTEM_EXTENSIONS
dnl AC_AIX
AC_ISC_POSIX
dnl AC_MINIX

dnl Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PATH_PROG(BASENAME, basename)
AC_PATH_PROG(BASH, bash)
dnl AC_CHECK_PROGS(SGML2TXT, "docbook-to-man", test -f \$@ || sgml2txt)

dnl Checks for C compiler features
AC_C_CONST
AC_C_VOLATILE
AC_C_INLINE

dnl Checks for system features to implement optimizations
dnl AC_C_BIGENDIAN
dnl AC_CHECK_SIZEOF(int)

ac_default_prefix="${HOME}/${PACKAGE}"
m4_pattern_allow(LIBOBJ)

if test "$ac_cv_c_inline" != no ; then
    AC_DEFINE(HAVE_INLINE, 1, [Define to 1 if you have working inline modifier])
    AC_SUBST(HAVE_INLINE)
fi

LD="${CC}" dnl Linker for the modules
CPPFLAGS="-D_REENTRANT ${CPPFLAGS}" dnl defaults

dnl Checks for options to CFLAGS
AC_CHECK_LDFLAG(fe_cv_add_wnotrigraphs, -Wno-trigraphs, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wnolonglong, -Wno-long-long, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wnopointersign, -Wno-pointer-sign, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wnounusedparameter, -Wno-unused-parameter, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_wall, -Wall, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_pipe, -pipe, CFLAGS)
AC_CHECK_LDFLAG(fe_cv_add_fshortenums, -fshort-enums, CFLAGS)

dnl GCC 3.x guess wrong about strict aliasing
fe_save_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -Werror"
AC_TRY_COMPILE([struct atest {
char *s; };], [struct atest *a;
void **v = (void **)&a;
*v = (void *)a;
    ], [CFLAGS="$fe_save_CFLAGS"], [CFLAGS="$fe_save_CFLAGS"
    AC_CHECK_LDFLAG(fe_cv_add_fnostrictaliasing, -fno-strict-aliasing, CFLAGS)
])

dnl Do we want profiling?
if test "x$CC" = xgcc; then
    AC_ARG_ENABLE([profile],
        [  --enable-profile        enable profiling statistics generation for GCC],
	[AC_CHECK_LDFLAG(fe_cv_add_pg, -pg, CFLAGS)])
fi
AC_CHECK_DEBUG

dnl Need to make static code?
AC_ARG_ENABLE(static,
    [  --enable-static         build static code],
    [ unset fe_cv_static
    if test $enableval = yes; then
        fe_enable_static=yes
    fi], [fe_enable_static=no])

AC_CACHE_CHECK([whether you need static compiling], fe_cv_static,
[  fe_cv_static="$fe_enable_static"
if test "$fe_cv_static" = no; then
    case "$host_os" in
	linux* | freebsd* | openbsd* | netbsd*)
	    ;;
	bsd*)
	    AC_MSG_RESULT(BSD/OS, ok)
	    AC_MSG_CHECKING(again for static)
	    if test "${host_os}" = bsdi2; then
		fe_cv_static=yes
	    fi
	    ;;
	solaris* | sunos* | hpux)
	    ;;
	*)
	    # I don't know how to builf modules on other platforms
	    # Will try to run, maybe fall on the start...
	    fe_cv_static=yes
	    ;;
    esac
fi ])

if test "$fe_cv_static" = no; then
    case "$host_os" in
	linux*)
	    LD="${LD} -shared -nostartfiles"
	    AC_CHECK_LDFLAG(fe_cv_fpic, [-fpic], CPPFLAGS)
	    ;;
	freebsd*)
	    LD="${LD} -shared"
	    CPPFLAGS="-fpic ${CPPFLAGS}"
	    AC_DEFINE(_FREEBSD, 1, [Define to 1 if on FreeBSD])
	    ;;
	openbsd* | netbsd*)
	    LD="ld -x -Bshareable"
	    CPPFLAGS="-fpic ${CPPFLAGS}"
	    AC_DEFINE(_OPENBSD, 1, [Define to 1 if on OpenBSD])
	    ;;
	bsd*)
	    if test ! "${host_os}" = bsdi2; then
		CC="shlicc"
		LD="shlicc -r"
	    fi
	    ;;
	solaris*)
#	    LD="ld -G -z text"
	    LD="ld -G"
	    AC_CHECK_LDFLAG(fe_cv_add_wl_e, [-Wl,-E], LDFLAGS)
	    ;;
	sunos*)
	    LD="ld"
	    CPPFLAGS="-fPIC ${CPPFLAGS}"
	    AC_CHECK_LIB(dl,main)
	    ;;
	hpux)
	    LD="ld -b"
	    CPPFLAGS="-fPIC ${CPPFLAGS}"
	    LDFLAGS="-Wl,-E ${LDFLAGS}"
	    AC_DEFINE(_HPUX, 1, [Define to 1 if on HP-UX])
	    ;;
	*)
	    ;;
    esac
fi

dnl Some substitutions for modules/Makefile.mods
case `eval "make -v -f NoFile 2>/dev/null"` in
    GNU*)
	MAKEIFGNU="ifdef"
	MAKEELSE="else"
	MAKEENDIF="endif"
	;;
    *)
	MAKEIFGNU=".ifndef"
	MAKEELSE=".else"
	MAKEENDIF=".endif"
esac
AC_SUBST(MAKEIFGNU)
AC_SUBST(MAKEELSE)
AC_SUBST(MAKEENDIF)

dnl Checks for multithreaded heap managers
AC_SEARCH_LIBS(mallocctl, mtmalloc) dnl Sun's MTmalloc
AC_HAVE_LIBRARY(hoard) dnl Not sure if it works that way

dnl Check for libthr presence (it has thread-safe libc functions on FreeBSD)
AC_HAVE_LIBRARY(thr)

dnl Checks for libraries and extensions
AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(connect, nsl)
AC_SEARCH_LIBS(log, m)
AC_SEARCH_LIBS(gethostbyname, [dns nsl])

if test "$fe_cv_static" = no; then
    AC_SEARCH_LIBS(dlopen, dl, [AC_DEFINE(HAVE_DLOPEN, 1, [Define to 1 if you have dlopen function])],
	[AC_MSG_WARN([    Sorry, modules are not available now])
	fe_cv_static=yes
    ])
fi

AC_CHECK_ICONV

dnl Checks for threads.
AC_CHECK_LDFLAG(fe_cv_add_pthread, -pthread, CFLAGS)
AC_SEARCH_LIBS(pthread_cancel, [c_r pthread], [fe_cv_have_pthreads=yes],
    [AC_MSG_ERROR([      You cannot compile without threads support.
      Install pthreads library and then run configure again.])
])

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(unistd.h dlfcn.h crypt.h getopt.h limits.h posix1_lim.h)
AC_CHECK_HEADERS(fcntl.h strings.h stdint.h sys/filio.h thread.h wctype.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_PID_T
AC_TYPE_UID_T
AC_STRUCT_ST_RDEV
AC_HEADER_TIME

if test "$fe_cv_static" = yes; then
    EXTRA_HDR='${top_srcdir}/core/static.h'
    CFLAGS="${CFLAGS} -DSTATIC"
    LD_MODS="../modules/*/*.o"
    LD="${CC}"
    AC_CHECK_LDFLAG(fe_cv_add_static, -static, LDFLAGS)
    if test $fe_cv_add_static = no; then
	AC_CHECK_LDFLAG(fe_cv_add_Bstatic, -Bstatic, LDFLAGS)
    fi
else
    dnl Check for -rdynamic option to LDFLAGS
    AC_CHECK_LDFLAG(fe_cv_add_rdynamic, -rdynamic, LDFLAGS)
fi

dnl Checks for library functions.
AC_CHECK_FUNCS(rename getrusage getdtablesize clock srand48 bzero sigaction)
AC_CHECK_FUNCS(sigemptyset strncasecmp setpgid uname snprintf vsnprintf)
AC_CHECK_FUNCS(gethostname getwd strtol pthread_kill_other_threads_np towlower)

if test "$ac_cv_func_sigaction" = yes; then
    ac_cv_sa_handler=yes
else
    AC_CACHE_CHECK([for sa_handler in <signal.h>], ac_cv_sa_handler,
	[AC_EGREP_HEADER([sa_handler], signal.h, ac_cv_sa_handler=yes,
	    ac_cv_sa_handler=no)
    ])
fi
if test "$ac_cv_sa_handler" = yes; then
    AC_DEFINE(HAVE_SA_HANDLER, 1, [Define to 1 if you have sa_handler in struct sigaction])
fi

AC_CACHE_CHECK([whether you need libcrypt], ac_cv_need_libcrypt,
[
    ac_cv_have_crypt=yes
    AC_TRY_LINK([], [crypt ("","");], [ac_cv_need_libcrypt=no],
	[save_LIBS="${LIBS}"
	LIBS="-lcrypt ${LIBS}"
	AC_TRY_LINK([], [crypt ("","");], [ac_cv_need_libcrypt=yes],
	    [ac_cv_need_libcrypt=no
	    ac_cv_have_crypt=no
	])
	LIBS="${save_LIBS}"
    ])
])
if test "$ac_cv_have_crypt" = no; then
    AC_MSG_ERROR([	You cannot compile the bot for without password encription!])
fi
if test "$ac_cv_need_libcrypt" = yes; then
    LIBS="-lcrypt ${LIBS}"
fi

AC_REPLACE_FUNCS(strcasecmp)

AC_CHECK_FUNC(rwlock_init, [AC_DEFINE(HAVE_RWLOCK_INIT)
    AC_CHECK_LDFLAG(fe_cv_add_mt, -mt, CFLAGS)],
    [AC_CHECK_FUNCS(pthread_rwlock_init)
])
if test "$ac_cv_func_rwlock_init" = no -a "$ac_cv_func_pthread_rwlock_init" = no
then
    AC_REPLACE_FUNCS(rwlock_init)
fi

GENDATE="`LC_TIME=C date +'%B %Y'`"
AC_SUBST(GENDATE)
AC_DEFINE_UNQUOTED(COMPILETIME, "`LC_TIME=C date`", [The compilation time string.])

AC_SUBST(LD)
AC_SUBST(LD_MODS)
AC_SUBST(BASENAME)
AC_SUBST(EXTRA_HDR)
AC_SUBST(MODLIBS) dnl see modules/Makefile.mods.in
AC_SUBST(STATICLIBS)

AM_GNU_GETTEXT
AC_SYS_LONG_FILE_NAMES

