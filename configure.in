dnl Process this file with autoconf to produce a configure script.
AC_INIT(core/foxeye.h)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(foxeye, 0.10)

ALL_LINGUAS="ru uk"

AC_CANONICAL_HOST

dnl Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_LN_S
AC_PATH_PROG(BASENAME, basename)
AC_PATH_PROG(SGML2TXT, sgml2txt, test -f \$@ || sgml2txt)

AC_AIX
AC_ISC_POSIX
AC_MINIX

dnl Checks for C compiler features
AC_C_CONST
AC_C_VOLATILE
AC_C_INLINE
dnl AC_C_BIGENDIAN

ac_default_prefix="${HOME}/${PACKAGE}"
AC_CHECK_DEBUG

LD="${CC}" dnl Linker for the modules
CPPFLAGS="-D_REENTRANT ${CPPFLAGS}" dnl defaults

if test "$ac_cv_prog_CC" = gcc; then CFLAGS="-pedantic ${CFLAGS}"; fi

dnl Need to make static code?
AC_ARG_ENABLE(static,
    [  --enable-static         build static code],
    [ unset fe_cv_static
    if test $enableval = yes; then
        fe_enable_static=yes
    fi], [fe_enable_static=no])

AC_CACHE_CHECK([whether you need static compiling], fe_cv_static,
[  fe_cv_static="$fe_enable_static"
if test "$fe_cv_static" = no; then
    case "$host_os" in
	linux* | freebsd* | openbsd* | netbsd*)
	    ;;
	bsd*)
	    AC_MSG_RESULT(BSD/OS, ok)
	    AC_MSG_CHECKING(for 'gmake' on your machine)
	    AC_CHECK_PROG(GMAKE, gmake, found, no)
	    if test "${GMAKE}" = no; then
	        AC_MSG_ERROR(not found, sorry)
	    fi
	    AC_MSG_RESULT($GMAKE)
	    AC_MSG_CHECKING(again for static)
	    if test "${host_os}" = bsdi2; then
		fe_cv_static=yes
	    fi
	    ;;
	solaris* | sunos* | hpux)
	    ;;
	*)
	    # I don't know how to builf modules on other platforms
	    # Will try to run, maybe fall on the start...
	    fe_cv_static=yes
	    ;;
    esac
fi ])

if test "$fe_cv_static" = no; then
    case "$host_os" in
	linux*)
	    LD="${LD} -shared -nostartfiles"
	    ;;
	freebsd*)
	    LD="${LD} -shared"
	    CPPFLAGS="-fpic ${CPPFLAGS}"
	    AC_DEFINE(_FREEBSD)
	    ;;
	openbsd* | netbsd*)
	    LD="ld -x -Bshareable"
	    CPPFLAGS="-fpic ${CPPFLAGS}"
	    AC_DEFINE(_OPENBSD)
	    ;;
	bsd*)
	    if test ! "${host_os}" = bsdi2; then
		CC="shlicc"
		LD="shlicc -r"
	    fi
	    ;;
	solaris*)
	    LD="ld -G -z text"
	    LDFLAGS="-Wl,-E ${LDFLAGS}"
	    ;;
	sunos*)
	    LD="ld"
	    CPPFLAGS="-fPIC ${CPPFLAGS}"
	    AC_CHECK_LIB(dl,main)
	    ;;
	hpux)
	    LD="ld -b"
	    CPPFLAGS="-fPIC ${CPPFLAGS}"
	    LDFLAGS="-Wl,-E ${LDFLAGS}"
	    AC_DEFINE(_HPUX)
	    ;;
	*)
	    ;;
    esac
fi

dnl Checks for libraries
AC_CHECK_LIB(socket,socket)
AC_CHECK_LIB(nsl,connect)
AC_CHECK_LIB(dns,gethostbyname)
AC_CHECK_LIB(m,log)

if test "$fe_cv_static" = no; then
    AC_SEARCH_LIBS(dlopen, dl, [AC_DEFINE(HAVE_DLOPEN)],
	[AC_MSG_WARN([    Sorry, modules are not available now])
	fe_cv_static=yes
    ])
fi

dnl Checks for pthreads.
AC_CACHE_CHECK([for '-pthread' option], fe_cv_add_pthread,
    [AC_CHECK_LDFLAG("$CC", "-pthread", fe_cv_add_pthread)
])
if test "$fe_cv_add_pthread" = yes; then CFLAGS="-pthread ${CFLAGS}"; fi

AC_SEARCH_LIBS(pthread_cancel, [c_r pthread], [fe_cv_have_pthreads=yes],
    [AC_MSG_ERROR([      You cannot compile without POSIX threads.
      Install pthreads library and then run configure again.])
])

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(unistd.h dlfcn.h crypt.h getopt.h limits.h posix1_lim.h)
AC_CHECK_HEADERS(fcntl.h strings.h stdint.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_PID_T
AC_TYPE_UID_T
AC_STRUCT_ST_RDEV
AC_HEADER_TIME

if test "$fe_cv_static" = yes; then
    EXTRA_HDR='${top_srcdir}/core/static.h'
    CFLAGS="${CFLAGS} -DSTATIC"
    LD_MODS="../modules/*/*.o"
    LD="${CC}"
else
    dnl checks for -rdynamic option to LDFLAGS
    AC_CACHE_CHECK([for '-rdynamic' linker option], fe_cv_add_rdynamic,
	[AC_CHECK_LDFLAG("$CC", "-rdynamic", fe_cv_add_rdynamic)
    ])
    if test "$fe_cv_add_rdynamic" = yes; then LDFLAGS="-rdynamic ${LDFLAGS}"; fi
fi

AC_CACHE_CHECK([for '-Wall' option], fe_cv_add_wall,
    [AC_CHECK_LDFLAG("$CC", "-Wall", fe_cv_add_wall)
])
if test "$fe_cv_add_wall" = yes; then CFLAGS="-Wall ${CFLAGS}"; fi

AC_CACHE_CHECK([for '-pipe' option], fe_cv_add_pipe,
    [AC_CHECK_LDFLAG("$CC", "-pipe", fe_cv_add_pipe)
])
if test "$fe_cv_add_pipe" = yes; then CFLAGS="-pipe ${CFLAGS}"; fi

dnl Checks for library functions.
AC_CHECK_FUNCS(rename getrusage getdtablesize clock srand48 bzero sigaction)
AC_CHECK_FUNCS(sigemptyset strncasecmp setpgid uname snprintf vsnprintf)
AC_CHECK_FUNCS(gethostname getwd strtol pthread_kill_other_threads_np)

if test "$ac_cv_func_sigaction" = yes; then
    ac_cv_sa_handler=yes
else
    AC_CACHE_CHECK([for sa_handler in <signal.h>], ac_cv_sa_handler,
	[AC_EGREP_HEADER([sa_handler], signal.h, ac_cv_sa_handler=yes,
	    ac_cv_sa_handler=no)
    ])
fi
if test "$ac_cv_sa_handler" = yes; then
    AC_DEFINE(HAVE_SA_HANDLER)
fi

AC_CACHE_CHECK([whether you need libcrypt], ac_cv_need_libcrypt,
[
    ac_cv_have_crypt=yes
    AC_TRY_LINK([], [char *s;

s = crypt ("passwd", "+key+salt");
], [ac_cv_need_libcrypt=no],
	[save_LIBS="${LIBS}"
	LIBS="-lcrypt ${LIBS}"
	AC_TRY_LINK([], [char *s;

s = crypt ("passwd", "+key+salt");
], [ac_cv_need_libcrypt=yes], [ac_cv_need_libcrypt=no
	    ac_cv_have_crypt=no
	])
	LIBS="${save_LIBS}"
    ])
])
if test "$ac_cv_have_crypt" = no; then
    AC_MSG_ERROR([	You cannot compile the bot for without password encription!])
fi
if test "$ac_cv_need_libcrypt" = yes; then
    LIBS="-lcrypt ${LIBS}"
fi

AC_REPLACE_FUNCS(strcasecmp)

AC_SUBST(LD)
AC_SUBST(LD_MODS)
AC_SUBST(BASENAME)
AC_SUBST(EXTRA_HDR)

AM_GNU_GETTEXT
AC_SYS_LONG_FILE_NAMES

AC_OUTPUT(Makefile \
        doc/Makefile \
        help/Makefile \
        scripts/Makefile \
	tree/Makefile \
        modules/Makefile \
	modules/Makefile.mods \
        core/Makefile \
	core/init.h \
	intl/Makefile \
	po/Makefile.in)
